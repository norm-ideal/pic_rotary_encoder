; ROTATION ENCODER DECODER + MOTOR CONTROLLER WITH MICROCHIP PIC 16F648A
; (C) 2013 IDEHARA Lab. TAMA UNIVERSITY
;
; CONNECTION
;	A0, A1	: ENCODER INPUT
;	A2	: RESET ENCODER COUNT SW (NEGATIVE)
;	A3	: MISSLE SHOT SW (NEGATIVE)
;	B1, B2	: SERIAL PORT
;	B3      : PWM
;	B4, B5  : MOTOR CONTROL
;	B7, B6	: ROTATION INDICATOR LED (CURRENT DRAIN)
;
; SERIAL PORT SETTINGS
;	DESIGNED FOR INTERNAL 4MHZ CLOCK
;	9600, NO STOP BIT, NO PARITY
;	REFER TO DOCUMENT 40044F P.71
;

; ***** PROGRAM *****
;
; IF TXREADY
; 	IF ROTATION_COUNT > 0
; 		SEND "A" AND DECREMENT RC
;	IF ROTATION_COUNT < 0
;		SEND "B" AND INCREMENT RC
; END
; IF STATUS(SW-A2,SW-A3) IS CHANGED
;	IF SW-A2 IS PRESSED
;		WAIT FOR TXREADY AND SEND "R"
;	IF SW-A3 IS PRESSED
;		WAIT FOR TXREADY AND SEND "S"
; END
; STAT[-1] := STAT[0]
; STATC := STAT[0] << 2 | PORTA
; STAT[0] := PORTA
; SWITCH STATC OF
; 	CASE 0001, 0111, 1110, 1000 :
;		INCREMENT ROTATION_COUNT
;		TURN ON INDICATOR_LED AND RESET INDICATOR_LED_TIMER
;	END
; 	CASE 0010, 1011, 1101, 0100 :
;		DECREMENT ROTATION_COUNT
;		TURN ON INDICATOR_LED AND RESET INDICATOR_LED_TIMER
;	END
;	OTHERWISE
;		DECREMENT LED_INDICATOR_COUNT AND IF 0 THEN TURN OFF LEDS
;	END
; END

	list p=16f648a
	include "p16f648a.inc"

	__CONFIG _BODEN_OFF & _CP_OFF & _MCLRE_OFF & _WDT_OFF & _PWRTE_ON & _LVP_OFF & _INTOSC_OSC_NOCLKOUT

	ORG     0000H
	GOTO    MAIN

	ORG     0004H
	RETFIE

STATN   EQU     20H             ; State now	00 - 11
STATM1  EQU     21H             ; State n-1	00 - 11
STATC   EQU     22H             ; State Combined ST(n-1):ST(n) 0000 - 1111
ROTATE  EQU     23H             ; ROTATION {00, 01, 10}
SLEEPC	EQU	24H		; Sleep Counter
LEDT1	EQU	25H		; LED Timer 1
LEDT2	EQU	26H		; LED Timer 2
LASTSW	EQU	27H		; LAST SWITCH STATE
DIRC	EQU	28H		; DIRECTION COUNTER (*SIGNED* INT)

MAIN
	MOVLW	07H		; Turn comparators off and
	MOVWF	CMCON		; enable pins for I/O functions

	BSF     STATUS,RP0	; switch bank
	MOVLW   0FH		; 0000 1111	A0,A1=Encoder INPUT
				;		A2 = Reset Encoder (NEG)
	MOVWF   TRISA		; 		A3 = Shot (NEG)
	MOVLW   02H		; 0000 0110
	MOVWF   TRISB		; 0000 011x

; 	B2 = TxD, B1 = RxD (both should be INPUT)
;	Output drive, when required, is controlled by the peripheral circuitry.
;
; 	B7, B6 = rotation indicator
;	B5, B4 = MOTOR
;	B3     = MOTOR PWM

	BCF     STATUS,RP0	; switchback bank


; START UART CONFIGURATION: DOCUMENT 40044F P.71
	BSF	STATUS,RP0
	MOVLW	B'00100100'	; CLOCK-N/A, TX9-OFF, TXENABLE=1, ASYNC
				; N/A, BAUDRATE-HIGH, TR.SR-FULL, TX9D=0
	MOVWF	TXSTA
	MOVLW	19H		; F/16/(X+1)
				; 4MHz / 16 / (25+1) = 9615
	MOVWF	SPBRG
	BCF	STATUS,RP0

	CALL	WAIT

	MOVLW	B'10010000'	; SERIAL-ON, 9BIT-OFF, SNGLE-N/A, CONTRCV=ON
				; ADEN-N/A, (FRAMEERR, OVERERR, RX9D)
	MOVWF	RCSTA
; END UART CONFIGURATION


; INITIALISE FIELDS
	CLRF    PORTA
	CLRF    PORTB
	CLRF    STATN
	CLRF    STATM1
	CLRF    STATC
	CLRF    ROTATE
	MOVLW	B'00001100'
	MOVWF	LASTSW
	CLRF	DIRC
; END INITIALISATION

; MAIN LOOP
MAINLOOP

; CHECK DIRECTION COUNTER, IF NOT ZERO AND IF TXREADY, SEND ONE
	; CHECK IF DIR COUNTER=0
	MOVFW	DIRC		; DIRC->W, AFFECTS ZERO FLAG!!
	BTFSC	STATUS, Z	; IF NOT ZERO, JUMP TO SEND DATA
	GOTO	CHECKSTAT

	; CHECK IF TX-READY AND SKIP IF TX-BUSY (DO NOT SEND DATA IN THIS LOOP)
	BSF	STATUS, RP0
	BTFSS	TXSTA, 1
	GOTO	TXBUSY		; IMPORTANT: STILL IN BANK 1!!!!

	; HERE, TX-READY. START SENDING DIR(A/B)
	BCF	STATUS, RP0	; RETURN TO BANK 0
	; CHECK THE SIGN OF DIR
	BTFSS	DIRC, 7		; CHECK THE SIGN BIT, SKIP IF MINUS
	GOTO	SENDPLUS

SENDMINUS			; SEND B, INCREMENT DIR
	MOVLW	'B'
	MOVWF	TXREG
	INCF	DIRC, F
	GOTO	CHECKSTAT

SENDPLUS			; SEND A, DECREMENT DIR
	MOVLW	'A'
	MOVWF	TXREG
	DECF	DIRC, F
	GOTO	CHECKSTAT
TXBUSY
	BCF	STATUS, RP0	; RETURN TO BANK 0.
				; IMPORTANT: THERE IS A PATH TO REACH HERE ON BANK 1!!!!
; END CHECK DIRECTION COUNTER

; STATUS BUTTONS CHECK
CHECKSTAT
	; Move STATE-NOW to STATE-MINUS1
	; AND TO STATE-COMBINED
	MOVFW   STATN
	MOVWF   STATM1
	MOVWF   STATC

	; CHECK IF SWITCH STATE IS CHANGED
	MOVFW	PORTA
	ANDLW	B'00001100'
	XORWF	LASTSW, F	; 0 IF NOT CHANGED
	MOVWF	LASTSW		; ZERO FLAG IS NOT CHANGED WITH "MOVWF"
	BTFSC	STATUS, Z	; IF NOT ZERO, JMP TO CHECK
	GOTO	SKIPSW		; IF ZERO, SKIP CHECKSWITCH

	; CHECK RESET ENCODER
	MOVLW	'R'
	BTFSS	PORTA, 2		; NEGATIVE LOGIC. 0=PRESSED
	CALL	SENDW

	; CHECK SHOT BUTTON
	MOVLW	'S'
	BTFSS	PORTA, 3		; NEGATIE LOGIC. 0=PRESSED
	CALL	SENDW
; END STATUS CHECK

; ENCODER INPUT CHECK
SKIPSW
	; STORE LAST 2 BITS FROM PORTA TO STATE-NOW
	MOVFW   PORTA
	ANDLW   B'00000011'
	MOVWF   STATN

	; ROTATE STAT-COMBINED 2 BITS -> GET IT TO WORK
	; 000000XX -> 0000XX00
	CLRC
	RLF     STATC, F
	RLF     STATC, W

	; OR WITH STATE-NOW (NOTE THAT STATE-NOW IS 0000 00YY)
	; 0000XX00 -> 0000XXYY
	IORWF   STATN, W
	; STORE IT TO STATE-COMBINED
	; 0000XXYY
	MOVWF   STATC

	; CALL TURNCHECK WITH W REGISTER -> STORE TO ROTATE
	CALL    TURNCHECK
	MOVWF   ROTATE

; CHECK Bit0, Bit1 OF ROTATION AND JUMP
	; CHECK CODE
	BTFSC   ROTATE, 0
	GOTO    ROTCW
	BTFSC   ROTATE, 1
	GOTO    ROTCCW

; IF NO ROTATION, COUNT DOWN THE LED TIMER (DURATION 0FFH x 0FFH)
	; NO ROTATION
	DECFSZ	LEDT1, F
	GOTO	MAINLOOP
	MOVLW	0FFH
	MOVWF	LEDT1
	DECFSZ	LEDT2, F
	GOTO	MAINLOOP

	; TIMER IS OVER
	BSF	PORTB, 6
	BSF	PORTB, 7
	GOTO    MAINLOOP

; ROTATION DETECTED -> INCREMENT DIRECTION COUNTER
; ï¿½@Note:	If the rotation charactor is sent directly, it drops some characters
;		when the rotation is too fast.
;		So we count the rorations and send out one by one for one loop.
ROTCW
	BSF     PORTB, 6	; TURN ON/OFF THE INDICATOR LED
	BCF     PORTB, 7
	INCF	DIRC, F		; COUNT UP DIR COUNTER
	GOTO    RESETTIMER

ROTCCW
	BSF     PORTB, 7	; TURN ON/OFF THE INDICATOR LED
	BCF     PORTB, 6
	DECF	DIRC, F		; COUNT DOWN DIR COUNTER
	GOTO    RESETTIMER

RESETTIMER
	MOVLW	0FFH
	MOVWF	LEDT1
	MOVWF	LEDT2
	GOTO	MAINLOOP
; END ENCODER CHECK

; PROCEDURE SENDW : WAIT FOR TX-READY, SEND W REGISTER
SENDW
	;WAIT FOR TX-READY
	BSF	STATUS, RP0
LOOP1
	BTFSS	TXSTA, 1
	GOTO	LOOP1
	BCF	STATUS, RP0
	MOVWF	TXREG
	RETURN
; END PROCEDURE

; FUNCTION TURNCHECK: DECIDES ROTATION DIRECTION FROM W REGISTER
TURNCHECK
	; INPUT:        W 0000XXYY X:FORMER ENC. Y:CURRENT ENC.
	; OUTPUT:       W 00000001 CW   00000010 CCW    0 NO ROT

	; ADD W=STATC TO PROGRAM-COUNTER, MULTIPLE JUMP
	ADDWF   PCL, F		; PATTERN
	RETLW   0               ; 0000
	RETLW   1               ; 0001
	RETLW   2               ; 0010
	RETLW   0               ; 0011

	RETLW   2               ; 0100
	RETLW   0               ; 0101
	RETLW   0               ; 0110
	RETLW   1               ; 0111

	RETLW   1               ; 1000
	RETLW   0               ; 1001
	RETLW   0               ; 1010
	RETLW   2               ; 1011

	RETLW   0               ; 1100
	RETLW   2               ; 1101
	RETLW   1               ; 1110
	RETLW   0               ; 1111
; END TURNCHECK

; PROCEDURE WAIT FOR 0FFH LOOPS
WAIT
	MOVLW	0FFH
	MOVWF	SLEEPC
SLOOP	DECFSZ	SLEEPC, F
	GOTO	SLOOP
	RETURN
; END WAIT

	END
